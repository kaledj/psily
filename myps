#!/bin/bash

ttystring=$(tty)
clk_tck=$(getconf CLK_TCK)

default=true
while getopts "p:U:eC:" opt; do
    case "$opt" in
    p)
        pid_arg="$OPTARG"
        default=false
        ;;
    U)
        user_arg="$OPTARG"
        default=false
        ;;
    e)
        e_mode=true
        default=false
        ;;
    C)
        comm_arg="$OPTARG"
        default=false
        ;;
    \?)
        exit 0
    esac
done

printf "%5s %-8s %8s %s\n" "PID" "TTY" "TIME" "CMD"

# Search for either all processes or a single process.
if [[ ! "$pid_arg" = "" ]]; then
    find_regex='^/proc/'"$pid_arg"'$'
else
    find_regex='^/proc/[0-9]+$'
fi

find /proc -maxdepth 1 -type d -regex "$find_regex" -print0 | while read -d $'\0' process; do
    # Make sure it still exists
    if [[ ! -e $process/stat ]]; then continue; fi

    # Default mode
    if [[ "$default" = true ]]; then
         # Check if EUID=euid
         euid=$(awk '/^Uid:/{print $3; exit 0}' ${process}/status)
         if [[ ! "$EUID" = "$euid" ]]; then continue; fi
    fi

    # -U mode. Skips processes that arent owned by the given user.
    if [[ ! "$user_arg" = "" ]]; then
        user_id="$user_arg"
        num_re='^[0-9]+$'
        if [[ ! "$user_id" =~ $num_re ]]; then
            user_id=$(id -u "$user_id")
        fi
        # Check if user_id=uid
        uid=$(awk '/^Uid:/{print $2; exit 0}' ${process}/status)
        if [[ ! "$user_id" = "$uid" ]]; then continue; fi
    fi

    # Parse stat file.
    read pid comm tty_nr utime stime <<< $(cut -d' ' -f1,2,7,14,15 ${process}/stat)
    comm=${comm:1:((${#comm}-2))}

    # If C mode, check the command.
    if [[ ! "$comm_arg" = "" ]]; then
        if [[ ! "$comm" = "$comm_arg" ]]; then continue; fi
    fi

    # Parse TTY information
    if [[ "$tty_nr" = "0" ]]; then
        tty="?"
    else
        tty_nr=$(./ttyParse $tty_nr)
        read tty_maj tty_min <<< "$tty_nr"
        case "$tty_maj" in
            136)
                tty="pts/"$tty_min
                ;;
            4)
                tty="tty"$tty_min
                ;;
        esac
    fi

    # Only show process from same controlling terminal in default mode.
    if [[ ! "$ttystring" =~ "$tty" && "$default" = true ]]; then continue; fi

    # Calculate time field and print line.
    total_time=$((($utime+$stime)/$clk_tck))
    seconds=$((total_time%60))
    minutes=$((total_time/60%60))
    hours=$((total_time/60/60))
    printf "%5s %-8s %02d:%02d:%02d %s\n" "$pid" "$tty" "$hours" "$minutes" "$seconds" "$comm"

done
